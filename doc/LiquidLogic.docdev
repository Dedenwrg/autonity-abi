{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `_spender` cannot be the zero address."},"burn(address,uint256)":{"custom:restricted-to":"Restricted to the autonity contract."},"decimals()":{"details":"ERC-20 Optional.","returns":{"_0":"uint8 the number of decimals the LNTN token uses."}},"lock(address,uint256)":{"params":{"_account":"address of the account to lock funds . _amount LNTN amount of tokens to lock."}},"mint(address,uint256)":{"custom:restricted-to":"the autonity contract."},"redistribute(uint256)":{"custom:restricted-to":"the autonity contract"},"setCommissionRate(uint256)":{"params":{"_rate":"New rate."}},"transfer(address,uint256)":{"details":"Emits a {Transfer} event. Implementation of {IERC20 transfer}","returns":{"_success":"a boolean value indicating whether the operation succeeded."}},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. Requirements: - `_sender` and `_recipient` must be allowed to hold stake. - `_sender` must have a balance of at least `_amount`. - the caller must have allowance for ``_sender``'s tokens of at least `_amount`."},"unclaimedRewards(address)":{"params":{"_account":"Delegator account."}},"unlock(address,uint256)":{"params":{"_account":"address of the account to lock funds . _amount LNTN amount of tokens to lock."}}},"version":1}
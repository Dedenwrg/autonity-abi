{"kind":"user","methods":{"bond(address,uint256)":{"notice":"Used by beneficiary to bond some NTN of the contract. All bondings are delegated, as stakeable vesting smart contract cannot own a validator node."},"changeContractBeneficiary(address)":{"notice":"Changes the beneficiary of the contract to the `_recipient` address. The `_recipient` address can release and stake tokens from the contract. Rewards which have been entitled to the beneficiary due to bonding from this contract are not transferred to `_recipient` address. Instead rewards earned until this point from this contract are calculated and transferred to the old beneficiary address."},"claimRewards()":{"notice":"Used by beneficiary to claim all rewards from bonding to all the validators."},"claimRewards(address)":{"notice":"Used by beneficiary to claim rewards from bonding to validator."},"contractTotalValue()":{"notice":"Returns the current total value of the contract in NTN."},"createContract(address,uint256,uint256,uint256,uint256)":{"notice":"Creates a new contract. Can be called once only."},"getBeneficiary()":{"notice":"Returns the beneficiary address of the contract."},"getContract()":{"notice":"Returns the contract."},"getLinkedValidators()":{"notice":"Returns the list of validators that are bonded to or have some unclaimed rewards."},"getManagerContractAddress()":{"notice":"Returns the address of the `StakeableVestingManager` smart contract."},"liquidBalance(address)":{"notice":"Returns the amount of LNTN bonded to `_validator` from the contract."},"lockedLiquidBalance(address)":{"notice":"Returns the amount of locked (not unvested) LNTN bonded to `_validator` from the contract."},"releaseAllLNTN()":{"notice":"Used by beneficiary to transfer all vested LNTN to his own address. If the withdrawable vested funds is `v` NTN, the LNTN will be released in the following order starting from `idx = 0`.       1. Let `b` = unlocked LNTN balance of the contract for `linkedValidators[idx]` and `c` = equivalent NTN for `b` LNTN.          `if (c >= v)`, then LNTN equivalent of `v` NTN will be released from `linkedValidators[idx]` and the function exits.       2. `if (c < v)`, then all unlocked LNTN from `linkedValidators[idx]` will be released and we increase `idx = idx+1`          and we update `v = v-c` and repeate from the process 1 if `idx < linkedValidators.length`.  So before calling `releaseAllLNTN()`, see the `linkedValidators` list using the function `getLinkedValidators()`."},"releaseAllNTN()":{"notice":"Used by beneficiary to transfer all vested NTN to his own address."},"releaseFunds()":{"notice":"Used by beneficiary to transfer all vested NTN and LNTN to his own address. When releasing funds, it tries to release everything from NTN balance first. If the withdrawable vested funds is `v` NTN and NTN balance of the contract is `n`, one of the following will happen       1. `if (n >= v)`, all `v` NTN will be released from NTN balance and the          remaining NTN balance will be `n-v` and no other asset is updated and the function exits.       2. `if (n < v)`, all `n` NTN will be released from NTN balance and we update `v = v-n` and additional          LNTN equivalent of `v` NTN will be released. See `releaseAllLNTN()` for how the LNTN will be released.  So before calling `releaseFunds()`, see the `linkedValidators` list using the function `getLinkedValidators()`."},"releaseLNTN(address,uint256)":{"notice":"Used by beneficiary to transfer some amount of vested LNTN to his own address."},"releaseNTN(uint256)":{"notice":"Used by beneficiary to transfer some amount of vested NTN to his own address."},"setManagerContract(address)":{"notice":"Set the address of the manager contract."},"unbond(address,uint256)":{"notice":"Used by beneficiary to unbond some LNTN of the contract from a validator."},"unclaimedRewards()":{"notice":"Returns the amount of all unclaimed rewards due to all the bonding from the contract entitled to beneficiary."},"unclaimedRewards(address)":{"notice":"Returns unclaimed rewards from bonding to validator."},"unlockedLiquidBalance(address)":{"notice":"Returns the amount of unlocked (not vested) LNTN bonded to `_validator` from the contract."},"updateFunds()":{"notice":"In case some funds are missing due to some pending staking operation that failed, this function updates the funds by handling the pending requests."},"updateFundsAndGetContract()":{"notice":"Updates the funds of the contract and returns the contract."},"vestedFunds()":{"notice":"Returns the amount of vested funds in NTN."},"withdrawableVestedFunds()":{"notice":"Returns the amount of vested funds and withdrawable in NTN."}},"notice":"It does not support to act as a treasury account. So only delegated staking works with this.","version":1}
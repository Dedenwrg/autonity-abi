{"details":"Interface of the Oracle Contract","events":{"NewRound(uint256,uint256,uint256,uint256)":{"details":"Emitted when a new voting round is started. round - the new round ID height - the height of the current block being executed in the EVM context. timestamp - the TS in time's seconds since Jan 1 1970 (Unix time) that the block been mined by protocol votePeriod - the round period in blocks for the price voting and aggregation."},"NewSymbols(string[],uint256)":{"details":"Emitted when a vote has been succesfully accounted after a {vote} call. round - the round at which new symbols are effective"},"Penalized(address,string,int256,uint120)":{"details":"Emitted when a participant gets penalized as an outlier","params":{"_median":"Median price calculate for this symbol.","_participant":"Oracle address of the validator","_reported":"Reported outlier price.","_symbol":"Outlier symbol."}},"Voted(address,int256[])":{"details":"Emitted when a vote has been succesfully accounted after a {vote} call."}},"kind":"dev","methods":{"distributeRewards(uint256)":{"details":"Signal that rewards are available. Only accessible from the autonity contract."},"finalize()":{"details":"Only accessible from the Autonity Contract.","returns":{"_0":"true if there is a new round and new symbol prices are available, false if not."}},"setOperator(address)":{"details":"Only accessible from the Autonity Contract."},"setSymbols(string[])":{"details":"emit {NewSymbols} event."},"setVoters(address[],address[],address[])":{"details":"Only accessible from the Autonity Contract."},"updateVoters()":{"details":"Only accessible from the Autonity Contract."},"vote(uint256,(uint120,uint8)[],uint256,uint8)":{"details":"Emit a {Vote} event in case of succesful vote.","params":{"_commit":"hash of the ABI packed-encoded prevotes to be submitted the next voting round.","_reports":"list of prices to be voted on. Ordering must respect the list of symbols returned by {getSymbols}."}}},"version":1}
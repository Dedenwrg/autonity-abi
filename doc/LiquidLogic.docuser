{"kind":"user","methods":{"allowance(address,address)":{"notice":"See {IERC20-allowance}."},"balanceOf(address)":{"notice":"Returns the amount of liquid newtons held by the account (ERC-20)."},"burn(address,uint256)":{"notice":"Burn tokens from the target account."},"claimRewards()":{"notice":"Withdraws all fees earned so far by the caller."},"claimTreasuryATN()":{"notice":"Send the unclaimed ATN entitled to treasury to treasury account"},"getTreasuryUnclaimedATN()":{"notice":"Returns the ATN amount that is yet to claim by treasury. Call function `claimTreasuryATN()` to claim."},"lock(address,uint256)":{"notice":"Add amount to the locked funds, restricted to the Autonity Contract."},"lockedBalanceOf(address)":{"notice":"Returns the amount of locked liquid newtons held by the account."},"mint(address,uint256)":{"notice":"Mint new tokens and transfer them to the target account."},"redistribute(uint256)":{"notice":"Redistribute fees, called once per epoch by the autonity contract. Update lastUnrealisedFeeFactor and transfer treasury fees."},"setCommissionRate(uint256)":{"notice":"Setter for the commission rate, restricted to the Autonity Contract."},"totalSupply()":{"notice":"Returns the total amount of stake token issued."},"transfer(address,uint256)":{"notice":"Moves `_amount` LNEW tokens from the caller's account to the recipient `_to`."},"unclaimedRewards(address)":{"notice":"Calculates the total claimable fees (ATN) earned by the delegator to-date."},"unlock(address,uint256)":{"notice":"Unlock the locked funds, restricted to the Autonity Contract."},"unlockedBalanceOf(address)":{"notice":"Returns the amount of unlocked liquid newtons held by the account."}},"version":1}